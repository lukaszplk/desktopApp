<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vm="clr-namespace:Firma.ViewModels.Jeden"
    xmlns:vmAll="clr-namespace:Firma.ViewModels.Wszystkie"
    xmlns:vw="clr-namespace:Firma.Views.Jeden"
    xmlns:vwAll="clr-namespace:Firma.Views.Wszystkie">

    <!--  tu będziemy łączyć View z ViewModel zakładek  -->
    <DataTemplate DataType="{x:Type vmAll:WszystkieFakturyViewModel}">
        <vwAll:WszystkieFakturyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszyscyKlienciViewModel}">
        <vwAll:WszyscyKlienciView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszyscyPracownicyViewModel}">
        <vwAll:WszyscyPracownicyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieUrlopyViewModel}">
        <vwAll:WszystkieUrlopyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieZleceniaViewModel}">
        <vwAll:WszystkieZleceniaView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieZamowieniaViewModel}">
        <vwAll:WszystkieZamowieniaView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieRabatyViewModel}">
        <vwAll:WszystkieRabatyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieMagazynViewModel}">
        <vwAll:WszystkieMagazynView />
    </DataTemplate>


    <DataTemplate DataType="{x:Type vmAll:WszystkieSamochodyViewModel}">
        <vwAll:WszystkieSamochodyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieTowaryViewModel}">
        <vwAll:WszystkieTowaryView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieAdresyViewModel}">
        <vwAll:WszystkieAdresyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieStanowiskaViewModel}">
        <vwAll:WszystkieStanowiskaView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieFirmyViewModel}">
        <vwAll:WszystkieFirmyView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieSposobyPlatnosciViewModel}">
        <vwAll:WszystkieSposobyPlatnosciView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmAll:WszystkieUslugiViewModel}">
        <vwAll:WszystkieUslugiView />
    </DataTemplate>


    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <vw:NowyTowarView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowySamochodViewModel}">
        <vw:NowySamochodView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyKlientViewModel}">
        <vw:NowyKlientView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <vw:NowyAdresView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NoweStanowiskoViewModel}">
        <vw:NoweStanowiskoView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaFirmaViewModel}">
        <vw:NowaFirmaView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowySposobPlatnosciViewModel}">
        <vw:NowySposobPlatnosciView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaUslugaViewModel}">
        <vw:NowaUslugaView />
    </DataTemplate>


    <!--  tu jest koniec łączenia View z ViewModel zakładek  -->


    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border
                        Margin="4"
                        Padding="4"
                        Background="Lightblue"
                        BorderBrush="LightGray"
                        BorderThickness="1"
                        CornerRadius="5"
                        SnapsToDevicePixels="True" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!--
                    This template ensures that content of a HeaderedContentControl
                    fills the available vertical space.
                -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter
                            ContentSource="Header"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            DockPanel.Dock="Top" />
                        <ContentPresenter ContentSource="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This style ensures that the borders in the main window are consistent.  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="LightBlue" />
        <Setter Property="BorderBrush" Value="WhiteSmoke" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="10" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
        This template explains how to render the list of commands on the left
        side in the main window (the 'Control Panel' area).
    -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl
            Margin="6,2"
            IsTabStop="False"
            ItemsSource="{Binding}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button
                        Margin="6"
                        Padding="4"
                        Background="LightBlue"
                        BorderThickness="0"
                        Command="{Binding Path=Command}"
                        Content="{Binding DisplayName}"
                        Opacity="0.8" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!--  This template explains how to render a tab item with a close button.  -->



    <!--  Przycisk zamknięcia w zakładce  -->

    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button
                Width="10"
                Height="10"
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Top"
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier"
                FontSize="9"
                FontWeight="Bold" />

            <!--  Tytuł zakładki  -->

            <ContentPresenter VerticalAlignment="Center" Content="{Binding Path=DisplayName}" />
        </DockPanel>
    </DataTemplate>

    <!--
        This template explains how to render the 'Workspace' content area in the main window.
    -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl
            Margin="4"
            IsSynchronizedWithCurrentItem="True"
            ItemTemplate="{StaticResource ClosableTabItemTemplate}"
            ItemsSource="{Binding}" />
    </DataTemplate>
</ResourceDictionary>